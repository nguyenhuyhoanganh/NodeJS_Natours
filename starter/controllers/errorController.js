const AppError = require('./../utils/appError');

// 3 lo·∫°i err c·ªßa mongoose
const handleCastErrorDB = err => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  // path: l√† t√™n field , value l√† gi√° tr·ªã truy·ªÅn v√†o route
  return new AppError(message, 400);
};

const handleDuplicateFieldsDB = err => {
  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
  // l·∫•y ra chu·ªói tr√πng trong c·∫∑p ngo·∫∑c k√©p
  //console.log(value);
  const message = `Duplicate field value: ${value}. Please use another value!`;
  return new AppError(message, 400);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  // Object.value() ƒë·ªÉ l·∫∑p qua c√°c properties c·ªßa object
  const message = `Invalid input data. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

const handleJWTError = () =>
  new AppError('Invalid token. Please log in again!', 401);

const handleJWTExpiredError = () =>
  new AppError('Your token has expired! Please log in again.', 401);

const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack
  });
}; // gi·ª≠ t·∫•t c·∫£ error trong qua tr√¨nh development

const sendErrorProd = (err, res) => {
  // Operational, trusted error: send message to client
  // l·ªói do v·∫≠n h√†nh: gi·ª≠ l·ªói th√¢n thi·ªán cho client
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });

    // Programming or other unknown error: don't leak error details
    // l·ªói do bug c·ªßa dev => gi·ª≠ l·ªói chung chung cho clinet, log l·ªói ra cho dev bi·∫øt
  } else {
    // 1) Log error
    console.error('ERROR üí•', err);

    // 2) Send generic message
    res.status(500).json({
      status: 'error',
      message: 'Something went very wrong!'
    });
  }
}; // gi·ª≠ h·∫°n ch·∫ø l·ªói th√¢n thi·ªán cho kh√°ch h√†ng trong qu√° tr√¨nh product

module.exports = (err, req, res, next) => {
  // console.log(err.stack); // hi·ªÉn th·ªã stack trace
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  if (process.env.NODE_ENV === 'development') {
    // n·∫øu ƒëang trong qu√° tr√¨nh development
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === 'production') {
    // n·∫øu ƒëang trong qu√° tr√¨nh production
    let error = { ...err };

    if (error.name === 'CastError') error = handleCastErrorDB(error);
    // khi c√≥ 1 value n√†o ƒë√≥ truy·ªÅn v√†o router kh√¥ng th·ªÉ cast qua ƒë∆∞·ª£c router t∆∞∆°ng ·ª©ng
    // findById(), findByIdAndUpdate(), findByIdAndDelete()
    if (error.code === 11000) error = handleDuplicateFieldsDB(error);
    // khi kh·ªüi t·∫°o 1 documnet c√≥ field b·ªã tr√πng l·∫∑p v·ªõi field ƒë∆∞·ª£c set unique: true
    // create(), save(),...
    if (error.name === 'ValidationError')
      error = handleValidationErrorDB(error);
    // khi x·∫£y ra l·ªói validation trong l√∫c create, update

    if (error.name === 'JsonWebTokenError') error = handleJWTError();
    // khi kh√¥ng kh·ªõp json web token
    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();
    // khi token h·∫øt h·∫°n

    sendErrorProd(error, res);
  }
};
